import streamlit as st
import chromadb
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os
from chromadb.config import Settings
from multiprocessing import cpu_count

# Configurar p√°gina
st.set_page_config(page_title="ChromaDB Viewer", layout="wide")

# T√≠tulo
st.title("üçÉ Visualizador do Banco de Dados de Doen√ßas em Folhas")

# Conectar ao ChromaDB

@st.cache_resource
def get_client():
    num_threads = min(cpu_count(), 2)  # por seguran√ßa, usa no m√°ximo 2
    settings = Settings(
        persist_directory="./database/chroma_db",
        anonymized_telemetry=False,
        num_threads=num_threads
    )
    return chromadb.Client(settings)

client = get_client()

# Sidebar
st.sidebar.title("Navega√ß√£o")
page = st.sidebar.radio("Escolha uma p√°gina:", 
    ["üìä Vis√£o Geral", "üîç Explorar Dados", "üìà An√°lise de Caracter√≠sticas"])

if page == "üìä Vis√£o Geral":
    st.header("Vis√£o Geral do Banco")
    
    # Obter cole√ß√µes
    collections = client.list_collections()
    st.subheader(f"Total de Cole√ß√µes: {len(collections)}")
    
    # Mostrar detalhes de cada cole√ß√£o
    for collection in collections:
        st.write("---")
        st.subheader(f"Cole√ß√£o: {collection.name}")
        
        # Metadata da cole√ß√£o
        st.write("Metadados da Cole√ß√£o:")
        st.json(collection.metadata)
        
        # Contar itens
        items = collection.get()
        total_items = len(items["ids"]) if "ids" in items else 0
        st.write(f"Total de Itens: {total_items}")
        
        if total_items > 0:
            # An√°lise de categorias
            categories = {}
            for metadata in items["metadatas"]:
                category = metadata.get("category", "desconhecido")
                categories[category] = categories.get(category, 0) + 1
            
            # Gr√°fico de distribui√ß√£o de categorias
            fig, ax = plt.subplots(figsize=(10, 5))
            plt.bar(categories.keys(), categories.values())
            plt.xticks(rotation=45, ha='right')
            plt.title("Distribui√ß√£o por Categoria")
            plt.tight_layout()
            st.pyplot(fig)

elif page == "üîç Explorar Dados":
    st.header("Explorar Dados")
    
    # Selecionar cole√ß√£o
    collections = client.list_collections()
    collection_names = [c.name for c in collections]
    selected_collection = st.selectbox("Escolha uma cole√ß√£o:", collection_names)
    
    if selected_collection:
        collection = client.get_collection(selected_collection)
        items = collection.get()
        
        if len(items["ids"]) > 0:
            # Criar DataFrame
            df = pd.DataFrame({
                "ID": items["ids"],
                "Categoria": [m.get("category", "desconhecido") for m in items["metadatas"]],
                "Data Processamento": [m.get("processing_date", "N/A") for m in items["metadatas"]],
                "Caminho": [m.get("path", "N/A") for m in items["metadatas"]]
            })
            
            # Filtros
            st.subheader("Filtros")
            col1, col2 = st.columns(2)
            with col1:
                categoria_filter = st.multiselect(
                    "Filtrar por Categoria:",
                    options=sorted(df["Categoria"].unique())
                )
            
            # Aplicar filtros
            if categoria_filter:
                df = df[df["Categoria"].isin(categoria_filter)]
            
            # Mostrar dados
            st.subheader("Dados")
            st.dataframe(df)
            
            # Download CSV
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button(
                "Download CSV",
                csv,
                "dados_chroma.csv",
                "text/csv",
                key='download-csv'
            )

elif page == "üìà An√°lise de Caracter√≠sticas":
    st.header("An√°lise de Caracter√≠sticas")
    
    # Selecionar cole√ß√£o
    collections = client.list_collections()
    collection_names = [c.name for c in collections]
    selected_collection = st.selectbox("Escolha uma cole√ß√£o:", collection_names)
    
    if selected_collection:
        collection = client.get_collection(selected_collection)
        items = collection.get()
        
        if len(items["ids"]) > 0:
            # Converter embeddings para array numpy
            embeddings = np.array(items["embeddings"])
            
            # Selecionar tipo de caracter√≠stica
            feature_type = st.radio(
                "Escolha o tipo de caracter√≠stica:",
                ["Cor (HSV)", "Textura", "Forma"]
            )
            
            if feature_type == "Cor (HSV)":
                # Mostrar histogramas HSV m√©dios por categoria
                categories = {}
                for embedding, metadata in zip(embeddings, items["metadatas"]):
                    category = metadata.get("category", "desconhecido")
                    if category not in categories:
                        categories[category] = []
                    categories[category].append(embedding[:96])  # HSV features
                
                # Calcular m√©dias
                for category in categories:
                    categories[category] = np.mean(categories[category], axis=0)
                
                # Plotar
                fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 10))
                
                for category, features in categories.items():
                    ax1.plot(features[:32], label=category)
                ax1.set_title("Histograma H (Matiz)")
                ax1.legend()
                
                for category, features in categories.items():
                    ax2.plot(features[32:64], label=category)
                ax2.set_title("Histograma S (Satura√ß√£o)")
                
                for category, features in categories.items():
                    ax3.plot(features[64:96], label=category)
                ax3.set_title("Histograma V (Valor)")
                
                plt.tight_layout()
                st.pyplot(fig)
            
            elif feature_type == "Textura":
                # An√°lise de textura
                texture_features = embeddings[:, 96:102]
                texture_names = ['M√©dia k3', 'Desvio k3', 'M√©dia k5', 'Desvio k5', 'M√©dia k7', 'Desvio k7']
                
                # Criar DataFrame
                texture_df = pd.DataFrame(
                    texture_features,
                    columns=texture_names
                )
                texture_df["Categoria"] = [m.get("category", "desconhecido") for m in items["metadatas"]]
                
                # Boxplot
                fig, ax = plt.subplots(figsize=(12, 6))
                sns.boxplot(data=texture_df.melt(id_vars=["Categoria"]), 
                          x="variable", y="value", hue="Categoria")
                plt.xticks(rotation=45)
                plt.title("Distribui√ß√£o das Caracter√≠sticas de Textura por Categoria")
                plt.tight_layout()
                st.pyplot(fig)
            
            else:  # Forma
                # An√°lise de forma
                shape_features = embeddings[:, -4:]
                shape_names = ['Num. Manchas', 'Tam. M√©dio', 'Desvio Tam.', 'Prop. M√°x.']
                
                # Criar DataFrame
                shape_df = pd.DataFrame(
                    shape_features,
                    columns=shape_names
                )
                shape_df["Categoria"] = [m.get("category", "desconhecido") for m in items["metadatas"]]
                
                # Boxplot
                fig, ax = plt.subplots(figsize=(12, 6))
                sns.boxplot(data=shape_df.melt(id_vars=["Categoria"]), 
                          x="variable", y="value", hue="Categoria")
                plt.xticks(rotation=45)
                plt.title("Distribui√ß√£o das Caracter√≠sticas de Forma por Categoria")
                plt.tight_layout()
                st.pyplot(fig) 