#!/usr/bin/env python3
"""
Demonstra√ß√£o do Sistema de Avalia√ß√£o CBIR com Previs√£o de Revoga√ß√£o

Este script demonstra como usar o sistema de avalia√ß√£o e previs√£o de revoga√ß√£o
implementado para o CBIR de identifica√ß√£o de doen√ßas em folhas.

Funcionalidades demonstradas:
1. Previs√£o de risco de revoga√ß√£o
2. Avalia√ß√£o completa do sistema
3. Gera√ß√£o de relat√≥rios
4. An√°lise de m√©tricas de performance
"""

import os
import sys
from pathlib import Path
from evaluation_system import CBIREvaluationSystem
from database import chroma
from engine import processing_engine as engine

def print_header(title):
    """Imprime um cabe√ßalho formatado"""
    print("\n" + "="*60)
    print(title.center(60))
    print("="*60)

def print_section(title):
    """Imprime uma se√ß√£o formatada"""
    print(f"\n{'-'*40}")
    print(f"üìã {title}")
    print(f"{'-'*40}")

def demo_revocation_prediction():
    """Demonstra a previs√£o de revoga√ß√£o"""
    print_header("DEMONSTRA√á√ÉO: PREVIS√ÉO DE REVOGA√á√ÉO")
    
    # Criar sistema de avalia√ß√£o
    evaluator = CBIREvaluationSystem()
    
    # Verificar se h√° imagens no banco
    stats = chroma.get_database_stats()
    if stats["total_images"] == 0:
        print("‚ùå Nenhuma imagem no banco de dados!")
        print("Execute primeiro: python cbir.py --process-only")
        return
    
    print(f"‚úÖ Banco de dados cont√©m {stats['total_images']} imagens")
    print(f"Categorias: {stats['categories']}")
    
    # Verificar se h√° imagem de consulta
    query_path = "image/uploads/query_leaf.jpg"
    if not os.path.exists(query_path):
        print(f"‚ùå Imagem de consulta n√£o encontrada: {query_path}")
        print("Coloque uma imagem em image/uploads/query_leaf.jpg")
        return
    
    print(f"‚úÖ Imagem de consulta encontrada: {query_path}")
    
    # Processar imagem de consulta
    print_section("PROCESSANDO IMAGEM DE CONSULTA")
    try:
        result = engine.process_image(query_path, save_to_db=False, visualize=False)
        
        if "error" in result:
            print(f"‚ùå Erro ao processar imagem: {result['error']}")
            return
        
        print("‚úÖ Imagem processada com sucesso")
        
        # Consultar banco de dados
        from datetime import datetime
        query_metadata = {
            "path": query_path,
            "type": "demo_query",
            "processing_date": str(datetime.now()),
            "category": "demo"
        }
        
        query_results = chroma.query_embedding(result["features"], metadata=query_metadata)
        
        if not query_results:
            print("‚ùå Erro ao consultar banco de dados")
            return
        
        # Analisar resultados
        analysis = chroma.analyze_query_results(query_results)
        
        if not analysis:
            print("‚ùå Erro ao analisar resultados")
            return
        
        print("‚úÖ An√°lise conclu√≠da")
        
        # Prever risco de revoga√ß√£o
        print_section("PREVIS√ÉO DE RISCO DE REVOGA√á√ÉO")
        revocation_prediction = evaluator.predict_revocation_risk(analysis)
        
        print(f"üéØ Categoria identificada: {analysis.get('identified_category', 'N/A')}")
        print(f"üìä Confian√ßa: {analysis.get('confidence', 0):.1f}%")
        print(f"‚ö†Ô∏è N√≠vel de risco: {revocation_prediction['revocation_risk']}")
        print(f"üìà Score de risco: {revocation_prediction['risk_score']:.3f}")
        
        if revocation_prediction['risk_factors']:
            print("\nüîç Fatores de risco identificados:")
            for factor in revocation_prediction['risk_factors']:
                print(f"  ‚Ä¢ {factor}")
        else:
            print("\n‚úÖ Nenhum fator de risco significativo identificado")
        
        # Exibir caracter√≠sticas extra√≠das
        features = evaluator.extract_confidence_features(analysis)
        if features:
            print_section("CARACTER√çSTICAS DE CONFIAN√áA")
            print(f"‚Ä¢ M√°xima similaridade: {features['max_similarity']:.1f}%")
            print(f"‚Ä¢ M√≠nima similaridade: {features['min_similarity']:.1f}%")
            print(f"‚Ä¢ M√©dia de similaridade: {features['mean_similarity']:.1f}%")
            print(f"‚Ä¢ Desvio padr√£o: {features['std_similarity']:.1f}%")
            print(f"‚Ä¢ Consist√™ncia de categoria: {features['category_consistency']:.3f}")
            print(f"‚Ä¢ Gap de similaridade: {features['similarity_gap']:.1f}%")
            print(f"‚Ä¢ Variabilidade de forma: {features['shape_variability']:.3f}")
        
        # Recomenda√ß√µes
        print_section("RECOMENDA√á√ïES")
        risk_level = revocation_prediction['revocation_risk']
        
        if risk_level == "ALTO":
            print("üö® ALTO RISCO DE REVOGA√á√ÉO")
            print("Recomenda√ß√µes:")
            print("1. Consulte um especialista para confirma√ß√£o")
            print("2. Tire novas fotos com melhor ilumina√ß√£o")
            print("3. Use imagens de diferentes √¢ngulos")
            print("4. Verifique se a imagem est√° bem focada")
        elif risk_level == "M√âDIO":
            print("‚ö†Ô∏è RISCO M√âDIO DE REVOGA√á√ÉO")
            print("Recomenda√ß√µes:")
            print("1. Fa√ßa inspe√ß√£o visual detalhada")
            print("2. Tire mais fotos de diferentes √¢ngulos")
            print("3. Consulte especialista se necess√°rio")
        else:
            print("‚úÖ BAIXO RISCO DE REVOGA√á√ÉO")
            print("O diagn√≥stico tem alta confiabilidade")
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {str(e)}")

def demo_system_evaluation():
    """Demonstra a avalia√ß√£o completa do sistema"""
    print_header("DEMONSTRA√á√ÉO: AVALIA√á√ÉO COMPLETA DO SISTEMA")
    
    # Verificar dataset de teste
    test_dataset = "image/test_dataset"
    if not os.path.exists(test_dataset):
        print(f"‚ùå Dataset de teste n√£o encontrado: {test_dataset}")
        print("Crie um diret√≥rio 'image/test_dataset' com subdiret√≥rios para cada categoria")
        print("Exemplo:")
        print("  image/test_dataset/")
        print("  ‚îú‚îÄ‚îÄ leaf_healthy/")
        print("  ‚îÇ   ‚îú‚îÄ‚îÄ healthy1.jpg")
        print("  ‚îÇ   ‚îî‚îÄ‚îÄ healthy2.jpg")
        print("  ‚îî‚îÄ‚îÄ leaf_with_disease/")
        print("      ‚îú‚îÄ‚îÄ disease1.jpg")
        print("      ‚îî‚îÄ‚îÄ disease2.jpg")
        return
    
    print(f"‚úÖ Dataset de teste encontrado: {test_dataset}")
    
    # Contar imagens de teste
    test_images = []
    for category_dir in Path(test_dataset).iterdir():
        if category_dir.is_dir():
            category_images = list(category_dir.glob('*.jpg')) + list(category_dir.glob('*.png'))
            test_images.extend(category_images)
            print(f"  ‚Ä¢ {category_dir.name}: {len(category_images)} imagens")
    
    if not test_images:
        print("‚ùå Nenhuma imagem de teste encontrada")
        return
    
    print(f"‚úÖ Total de imagens de teste: {len(test_images)}")
    
    # Criar sistema de avalia√ß√£o
    evaluator = CBIREvaluationSystem()
    
    # Executar avalia√ß√£o
    print_section("EXECUTANDO AVALIA√á√ÉO")
    print("Isso pode levar alguns minutos...")
    
    try:
        evaluation_result = evaluator.evaluate_system_performance(test_dataset, None)
        
        if not evaluation_result:
            print("‚ùå Falha na avalia√ß√£o do sistema")
            return
        
        metrics = evaluation_result["metrics"]
        test_results = evaluation_result["test_results"]
        
        print("‚úÖ Avalia√ß√£o conclu√≠da com sucesso!")
        
        # Exibir resultados
        print_section("RESULTADOS DA AVALIA√á√ÉO")
        print(f"üìä Acur√°cia geral: {metrics['overall_accuracy']:.3f}")
        print(f"üéØ Precis√£o: {metrics['precision']:.3f}")
        print(f"üìà Recall: {metrics['recall']:.3f}")
        print(f"‚öñÔ∏è F1-Score: {metrics['f1_score']:.3f}")
        
        print(f"\nüìä An√°lise de confian√ßa:")
        print(f"‚Ä¢ Confian√ßa m√©dia: {metrics['avg_confidence']:.1f}%")
        print(f"‚Ä¢ Desvio padr√£o: {metrics['std_confidence']:.1f}%")
        print(f"‚Ä¢ Score m√©dio de risco: {metrics['avg_risk_score']:.3f}")
        
        # An√°lise de revoga√ß√£o
        revocation_analysis = evaluator.analyze_revocation_patterns(test_results)
        
        print_section("AN√ÅLISE DE RISCO DE REVOGA√á√ÉO")
        for risk_level, analysis in revocation_analysis.items():
            print(f"\n‚ö†Ô∏è Risco {risk_level}:")
            print(f"  ‚Ä¢ Quantidade: {analysis['count']} imagens")
            print(f"  ‚Ä¢ Acur√°cia: {analysis['accuracy']:.3f}")
            print(f"  ‚Ä¢ Confian√ßa m√©dia: {analysis['avg_confidence']:.1f}%")
            print(f"  ‚Ä¢ Score de risco: {analysis['avg_risk_score']:.3f}")
        
        # Gerar relat√≥rio visual
        print_section("GERANDO RELAT√ìRIO VISUAL")
        try:
            report_path = evaluator.generate_evaluation_report(metrics)
            print(f"‚úÖ Relat√≥rio gerado: {report_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar relat√≥rio: {str(e)}")
        
        print(f"\n‚úÖ Demonstra√ß√£o conclu√≠da!")
        print(f"Total de imagens testadas: {metrics['total_tests']}")
        
    except Exception as e:
        print(f"‚ùå Erro durante avalia√ß√£o: {str(e)}")

def demo_usage_instructions():
    """Demonstra instru√ß√µes de uso"""
    print_header("INSTRU√á√ïES DE USO")
    
    print_section("1. PREPARA√á√ÉO DO SISTEMA")
    print("Para usar o sistema de avalia√ß√£o, voc√™ precisa:")
    print("1. Processar um dataset de treinamento:")
    print("   python cbir.py --process-only")
    print("2. Criar um dataset de teste:")
    print("   mkdir -p image/test_dataset/leaf_healthy")
    print("   mkdir -p image/test_dataset/leaf_with_disease")
    print("3. Adicionar imagens de teste nas pastas correspondentes")
    
    print_section("2. PREVIS√ÉO DE REVOGA√á√ÉO")
    print("Para testar a previs√£o de revoga√ß√£o:")
    print("1. Coloque uma imagem em image/uploads/query_leaf.jpg")
    print("2. Execute: python cbir.py")
    print("3. O sistema mostrar√° o risco de revoga√ß√£o")
    
    print_section("3. AVALIA√á√ÉO COMPLETA")
    print("Para avaliar o sistema completo:")
    print("1. Via linha de comando:")
    print("   python cbir.py --evaluate --test-dataset image/test_dataset")
    print("2. Via interface gr√°fica:")
    print("   python evaluation_gui.py")
    print("3. Via script de avalia√ß√£o:")
    print("   python evaluation_system.py --test-dataset image/test_dataset")
    
    print_section("4. INTERFACE GR√ÅFICA")
    print("Para usar a interface gr√°fica:")
    print("1. Execute: python evaluation_gui.py")
    print("2. Configure o dataset de teste")
    print("3. Clique em 'Executar Avalia√ß√£o'")
    print("4. Visualize os resultados nas abas")
    
    print_section("5. INTERPRETA√á√ÉO DOS RESULTADOS")
    print("‚Ä¢ Risco ALTO: Considere revisar o dataset ou melhorar a qualidade das imagens")
    print("‚Ä¢ Risco M√âDIO: O sistema est√° funcionando, mas pode ser melhorado")
    print("‚Ä¢ Risco BAIXO: O sistema est√° funcionando bem")
    print("‚Ä¢ Confian√ßa ‚â•80%: Diagn√≥stico altamente confi√°vel")
    print("‚Ä¢ Confian√ßa 60-80%: Diagn√≥stico prov√°vel, mas necessita confirma√ß√£o")
    print("‚Ä¢ Confian√ßa <60%: Diagn√≥stico incerto")

def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print_header("SISTEMA DE AVALIA√á√ÉO CBIR - DEMONSTRA√á√ÉO")
    
    print("Este script demonstra as funcionalidades do sistema de avalia√ß√£o")
    print("e previs√£o de revoga√ß√£o implementado para o CBIR.")
    
    while True:
        print("\n" + "="*40)
        print("OP√á√ïES DE DEMONSTRA√á√ÉO:")
        print("1. Previs√£o de revoga√ß√£o")
        print("2. Avalia√ß√£o completa do sistema")
        print("3. Instru√ß√µes de uso")
        print("4. Sair")
        print("="*40)
        
        choice = input("\nEscolha uma op√ß√£o (1-4): ").strip()
        
        if choice == "1":
            demo_revocation_prediction()
        elif choice == "2":
            demo_system_evaluation()
        elif choice == "3":
            demo_usage_instructions()
        elif choice == "4":
            print("\nüëã Obrigado por usar o sistema de avalia√ß√£o CBIR!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Escolha 1, 2, 3 ou 4.")

if __name__ == "__main__":
    main() 